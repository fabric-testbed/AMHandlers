---
# MIT License
#
# Copyright (c) 2020 FABRIC Testbed
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#
# Author: Komal Thareja (kthare10@renci.org)
# /tasks/main.yml
#

- name: Create a VM
  openstack.cloud.server:
    state: present
    auth:
      auth_url: "{{ auth_url }}"
      password: "{{ password }}"
      project_name: "{{ project_name }}"
      username: "{{ username }}"
    name: "{{ vmname }}"
    image: "{{ image }}"
    key_name: "{{ key_name }}"
    timeout: 200
    flavor: "{{ flavor }}"
    availability_zone: "{{ availability_zone }}"
    nics:
      - net-name: "{{ net_name }}"
    security_groups: "{{ security_group }}"
    meta:
      hostname: "{{ hostname }}"
    userdata: |
      {{ user_data }}
  when: operation == 'create'

- name: Attach a floating IP to the instance
  openstack.cloud.floating_ip:
    auth:
      auth_url: "{{ auth_url }}"
      password: "{{ password }}"
      project_name: "{{ project_name }}"
      username: "{{ username }}"
    server: "{{ vmname }}"
    state: present
    reuse: yes
    wait: true
    timeout: 200
    network: "{{ ext_network }}"
  when: operation == 'attach_fip'

- name: Delete a VM
  os_server:
    state: absent
    auth:
      auth_url: "{{ auth_url }}"
      password: "{{ password }}"
      project_name: "{{ project_name }}"
      username: "{{ username }}"
    name: "{{ vmname }}"
    delete_fip: yes
  when: operation == 'delete'

- name: Get a VM
  openstack.cloud.server_info:
    auth:
      auth_url: "{{ auth_url }}"
      password: "{{ password }}"
      project_name: "{{ project_name }}"
      username: "{{ username }}"
    filters:
      name: "{{ vmname }}"
  register: result
  when: operation == 'get'

- name: List all VMs
  openstack.cloud.server_info:
    auth:
      auth_url: "{{ auth_url }}"
      password: "{{ password }}"
      project_name: "{{ project_name }}"
      username: "{{ username }}"
  register: result
  when: operation == 'delete_all' or operation == 'list'

- name: Delete all VMs
  openstack.cloud.server:
    state: absent
    auth:
      auth_url: "{{ auth_url }}"
      password: "{{ password }}"
      project_name: "{{ project_name }}"
      username: "{{ username }}"
    name: "{{ item['name'] }}"
    delete_fip: yes
  when: operation == 'delete_all'
  with_items:
    - "{{ result['openstack_servers'] }}"

- name: perform an action on VM
  ansible.builtin.shell:
    openstack server {{ operation }} {{ vmname }}
  when: operation == 'stop' or operation == 'start' or operation == 'reboot'

