---
# MIT License
#
# Copyright (c) 2020 FABRIC Testbed
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#
# Author: Komal Thareja (kthare10@renci.org)
# /tasks/main.yml
#
- name: Install needed network manager libs
  become: true
  dnf:
    state: present
    name:
      - net-tools
      - NetworkManager
  when: image == 'centos' or image == 'rocky'

- name: Install needed network manager libs
  apt:
    name:
      - net-tools
      - network-manager
      - network-manager-gnome
    state: present
    update_cache: yes
  when: image == 'ubuntu'

- name: Update the renderer to NetworkManager
  lineinfile:
    state: present
    path: /etc/netplan/50-cloud-init.yaml
    regexp: "renderer: NetworkManager"
    insertafter: "^network:"
    line: "    renderer: NetworkManager"
  when: image == 'ubuntu'

- name: Apply the netplan
  ansible.builtin.shell:
     netplan apply
  when: image == 'ubuntu'

- name: Start service network manager, if not started
  ansible.builtin.service:
    name: NetworkManager
    state: started

- name: Determine the interface name identified by mac address
  set_fact:
    if_name: "{{ item }}"
  when:
    (item != 'lo')
    and
    (ansible_facts[item]['macaddress'] == mac )
  with_items:
    - "{{ ansible_interfaces }}"

- name: Determine the connection name for the device
  ansible.builtin.shell:
    'nmcli -t -g GENERAL.CONNECTION device show "{{ if_name }}"'
  register: connection_name

- name: Set the connection name for the device
  set_fact:
    conn_name: "{{ connection_name.stdout }}"

- name: Remove Ethernet connection for the interface
  community.general.nmcli:
    conn_name: "{{ conn_name }}"
    state: absent

- name: Add an Ethernet connection for the IPv4 interface
  community.general.nmcli:
    conn_name: "{{ if_name }}"
    ifname: "{{ if_name }}"
    type: ethernet
    ip4: "{{ ipv4_address }}/{{ ipv4_prefix }}"
    state: present
  when: vlan is not defined and ipv4_address is defined

- name: Add an Ethernet connection for the IPv6 interface
  community.general.nmcli:
    conn_name: "{{ if_name }}"
    ifname: "{{ if_name }}"
    type: ethernet
    ip6: '{{ ipv6_address }}/{{ ipv6_prefix }}'
    state: present
  when: vlan is not defined and ipv6_address is defined

- name: Add an Ethernet connection for the parent interface
  community.general.nmcli:
    conn_name: "{{ if_name }}"
    ifname: "{{ if_name }}"
    type: ethernet
    state: present
  when: vlan is defined

- name: Add an Ethernet connection for the tagged IPv4 interface
  community.general.nmcli:
    conn_name: "{{ if_name }}.{{ vlan }}"
    ifname: "{{ if_name }}.{{ vlan }}"
    type: vlan
    vlanid: "{{ vlan }}"
    vlandev: "{{ if_name }}"
    ip4: "{{ ipv4_address}}/{{ ipv4_prefix }}"
    state: present
  when: vlan is defined and ipv4_address is defined

- name: Add an Ethernet connection for the tagged IPv6 interface
  community.general.nmcli:
    conn_name: "{{ if_name }}.{{ vlan }}"
    ifname: "{{ if_name }}.{{ vlan }}"
    type: vlan
    vlanid: "{{ vlan }}"
    vlandev: "{{ if_name }}"
    ip6: '{{ ipv6_address }}/{{ ipv6_prefix }}'
    state: present
  when: vlan is defined and ipv6_address is defined

- name: Start service network manager, if not started
  ansible.builtin.service:
    name: NetworkManager
    state: restarted