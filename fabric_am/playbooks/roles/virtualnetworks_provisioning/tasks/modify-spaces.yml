---
# MIT License
#
# Copyright (c) 2022 FABRIC Testbed
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#
# Author: Liang Zhang (lzhang9@es.net)
# /tasks/create-spaces.yml
#

#
# Search virtual spaces with the given name
#
- ansible.builtin.include_tasks: search-space.yml

- name: Save virtual space id
  set_fact:
    virtual_space_id: "{{ space_id_list[0] }}"
  when: space_id_list is defined

#
# return if virutal space id does not exist
#


##
## Search virtual router within virtual_space_id
##
#- include_tasks: search-router.yml
#
#- name: Save virtual router id
#  set_fact:
#    virtual_router_id: "{{ virtual_router_id }}"
#
##
## Return if virtual route does not exist
##

#
#
#
- name: Get space info
  ansible.builtin.uri:
    url: "{{ base_url }}/v1/virtualnetworks/spaces/{{ space_id_list[0] }}?consolidated=false"
    headers:
      Accept: application/json
      Authorization: "{{ bearer_token }}"
      content-type: application/json
    status_code: [200, 303]
    method: GET
    follow_redirects: true
    validate_certs: no
  register: get_space_response
  
- name: Print get_space_response
  debug:
    msg: "{{ get_space_response }}"
    
- name: Save virtual router ids
  set_fact:
    virtualRouter_id_list: "{{ get_space_response.json.virtualRouterIds }}"

- name: Print virtual router ids
  debug:
    msg: "{{ virtualRouter_id_list }}"
  when: virtualRouter_id_list is defined

- name: Save virtual router ids
  set_fact:
    virtual_router_id: "{{ virtualRouter_id_list[0] }}"
    
- name: Print virtual router id
  debug:
    msg: "{{ virtual_router_id }}"
  when: virtual_router_id is defined

#
# Create L3 connections
#
- include_tasks: create-l3connection.yml
  vars:
    l3connection: "{{ oparg }}"
  with_items: "{{ opargs_a }}"
  loop_control:
    loop_var: oparg

#
# Delete L3 connections
#
- include_tasks: delete-l3connection.yml
  vars:
    l3connection: "{{ oparg }}"
  with_items: "{{ opargs_r }}"
  loop_control:
    loop_var: oparg


#
# Modify L3 connections
#
- include_tasks: modify-l3connection.yml
  vars:
    l3connection: "{{ oparg }}"
  with_items: "{{ opargs_m }}"
  loop_control:
    loop_var: oparg