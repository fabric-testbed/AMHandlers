---
# /tasks/main.yml
#
# ansible-galaxy collection install community.libvirt
- name: Start a VM
  community.libvirt.virt:
    name: "{{ kvmguest_name }}"
    state: running
  when: operation == 'start'

- name: Shutdown a VM
  community.libvirt.virt:
    name: "{{ kvmguest_name }}"
    state: shutdown
  when: operation == 'stop'

- name: List all VMs
  community.libvirt.virt:
    command: list_vms
  register: vm_list
  when: operation == 'list' or operation == 'is_deleted' or operation == 'delete'

- name: Verify VM has been deleted
  fail:
    msg: "VM {{ kvmguest_name }} has not been deleted yet."
  when: operation == 'is_deleted' and kvmguest_name in vm_list.list_vms

- name: Retrieve Tap Devices
  shell: "virsh domiflist {{ kvmguest_name }} | grep '^ tap' | awk '{print $1}'"
  register: virsh_output
  when: operation == 'delete' and kvmguest_name in vm_list.list_vms

- name: Extract QVO Device
  set_fact:
     qvo_devices: "{{ virsh_output.stdout_lines | map('regex_replace', 'tap', 'qvo') | list }}"
  when: operation == 'delete' and virsh_output is defined and virsh_output.changed

- name: Display QVO Device
  debug:
    var: qvo_devices
  when: operation == 'delete' and qvo_devices is defined

- name: Destory a VM
  community.libvirt.virt:
    name: "{{ kvmguest_name }}"
    state: destroyed
  when: operation == 'delete' and kvmguest_name in vm_list.list_vms

- name: Undefine a VM
  community.libvirt.virt:
    name: "{{ kvmguest_name }}"
    command: undefine
  when: operation == 'delete' and kvmguest_name in vm_list.list_vms

- name: Check if OVS interfaces exist
  stat:
    path: "/sys/class/net/{{ item }}"
  register: ovs_interface_status
  with_items: "{{ qvo_devices }}"
  when: operation == 'delete' and qvo_devices is defined and qvo_devices | length > 0

- name: Delete Interfaces from OVS
  command: "ovs-vsctl del-port br-int {{ item.item }}"
  with_items: "{{ ovs_interface_status.results }}"
  when: operation == 'delete' and qvo_devices is defined and qvo_devices | length > 0 and item.stat.exists == true

- name: Get CPU Info
  ansible.builtin.shell:
    fabric-virt-tools-cli cpu info --domain_name {{ kvmguest_name }}
  register: cpuinfo
  when: operation == 'cpuinfo'

- set_fact:
    cpuinfo: "{{ cpuinfo.stdout_lines }}"
  when: operation == 'cpuinfo'

- name: Get NUMA statistics of the host
  ansible.builtin.shell:
    numactl -H
  register: numainfo_host
  when: operation == 'numainfo'

- name: Get NUMA statistics of a VM
  ansible.builtin.shell:
    numastat -c -s {{ kvmguest_name }}
  register: numainfo_vm
  when: operation == 'numainfo'

- set_fact:
    numainfo_host: "{{ numainfo_host.stdout_lines }}"
    numainfo_vm: "{{ numainfo_vm.stdout_lines }}"
  when: operation == 'numainfo'

- name: Pin vCpu to host cpus for a VM
  ansible.builtin.shell:
    fabric-virt-tools-cli cpu pin --domain_name {{ kvmguest_name }} --vcpu {{ item.vcpu }} --cpu {{ item.cpu }}
  loop: "{{ vcpu_cpu_map }}"
  when: operation == 'cpupin'

- name: Pin memory to numa node for a VM
  ansible.builtin.shell:
    fabric-virt-tools-cli numa tune --domain_name {{ kvmguest_name }} --node_set {{ node_set | join(' --node_set ') }}
  when: operation == 'numatune'