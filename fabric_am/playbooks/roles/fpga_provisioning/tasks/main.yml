---
- name: Dump domain XML to file
  command: virsh dumpxml --inactive --security-info {{ kvmguest_name }}
  register: dumpxml_output

- name: Count the number of PCI functions of the device
  shell: "lspci | grep Xilinx | grep {{ bus[2:] }} | wc -l"
  register: num_pci_functions_output
  when: operation == 'attach'

- name: Save integer value as a fact
  set_fact:
    num_pci: "{{ num_pci_functions_output.stdout | int }}"
  when: operation == 'attach'

- name: Save XML to file
  copy:
    content: "{{ dumpxml_output.stdout }}"
    dest: /tmp/{{ kvmguest_name }}.xml

- name: Check that on attach the device isn't already attached
  xml:
    path: /tmp/{{ kvmguest_name }}.xml
    xpath: /domain/devices/hostdev[source[address[@bus='{{ bus }}' and @slot='{{ slot }}']]]
    count: yes
  register: device_xml_matches
  when: operation == 'attach'

- name: Generate new PCI devices XML sections
  # adds primary device (function 0x00) and a specified
  # number of other functions. Also adds an XHCI USB3.0 controller
  # and plugs USB JTAG into it
  set_fact:
    pci_devices_xml: |
          <hostdev mode='subsystem' type='pci' managed='yes'>
            <source>
              <address domain='{{ domain }}' bus='{{ bus }}' slot='{{ slot }}' function='0x0'/>
            </source>
            <address type='pci' domain='{{ dest_domain }}' bus='{{ dest_bus }}' slot='{{ dest_slot }}' function='0x0' multifunction='on'/>
          </hostdev>
          {% for pci_func in range(1, (num_pci | int)) %}
          <hostdev mode='subsystem' type='pci' managed='yes'>
            <source>
              <address domain='{{ domain }}' bus='{{ bus }}' slot='{{ slot }}' function='0x0{{ pci_func }}'/>
            </source>
            <address type='pci' domain='{{ dest_domain }}' bus='{{ dest_bus }}' slot='{{ dest_slot }}' function='0x0{{ pci_func }}'/>
          </hostdev>
          {% endfor %}
          <controller type='usb' index='{{ fpga_dest_usb_bus }}' model='nec-xhci'/>
          <hostdev mode='subsystem' type='usb' managed='yes'>
            <source>
              <vendor id='{{ fpga_usb_vendor_id }}'/>
              <product id='{{ fpga_usb_product_id }}'/>
            </source>
            <address type='usb' bus='{{ fpga_dest_usb_bus }}' port='{{ fpga_dest_usb_port }}'/>
          </hostdev>
  when: operation == 'attach' and device_xml_matches.count == 0

- name: Update the domain XML
  blockinfile:
    path: "/tmp/{{ kvmguest_name }}.xml"
    insertafter: "^  <devices>"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
    block: "{{ pci_devices_xml }}"
  when: operation == 'attach' and device_xml_matches.count == 0

- name: Remove FPGA configuration from domain XML file
  # notice this removes all PCI functions because they all
  # have the same bus and slot
  xml:
    path: "/tmp/{{ kvmguest_name }}.xml"
    xpath: /domain/devices/hostdev[source[address[@bus='{{ bus }}' and @slot='{{ slot }}']]]
    state: absent
  when: operation == 'detach'

- name: Remove USB JTAG device
  xml:
    path: "/tmp/{{ kvmguest_name }}.xml"
    xpath: /domain/devices/hostdev[source[vendor[@id='{{ fpga_usb_vendor_id }}'] and product[@id='{{ fpga_usb_product_id }}']]]
    state: absent
  when: operation == 'detach'

- name: Remove USB3.0 XHCI controller
  xml:
    path: "/tmp/{{ kvmguest_name }}.xml"
    xpath: /domain/devices/controller[@model='nec-xhci']
    state: absent
  when: operation == 'detach'

- name: Define edited domain
  shell: virsh define /tmp/{{ kvmguest_name }}.xml
  register: define_output

- name: Delete XML file
  file:
    path: /tmp/{{ kvmguest_name }}.xml
    state: absent
